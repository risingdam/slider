{
  "version": 3,
  "sources": ["../src/js/zoom.js", "../src/js/observers.js", "../node_modules/swiffy-slider/src/swiffy-slider.esm.js", "../src/js/slider.js"],
  "sourcesContent": ["'use strict'\n\nimport newElement from './slider'\n\n/**\n * Transform fuctions for canvas\n * @param {object} context - canvas.getContext('2d')\n */\nconst trackTransforms = (context) => {\n\n    let svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n    let xform = svg.createSVGMatrix()\n\n    context.getTransform = () => {\n        return xform\n    }\n\n    let savedTransforms = []\n\n    let save = context.save\n    context.save = () => {\n        savedTransforms.push(xform.translate(0, 0))\n        return save.call(context)\n    }\n\n    let restore = context.restore\n    context.restore = () => {\n        xform = savedTransforms.pop()\n        return restore.call(context)\n    }\n\n    let scale = context.scale\n    context.scale = (sx, sy) => {\n        xform = xform.scaleNonUniform(sx, sy)\n        return scale.call(context, sx, sy)\n    }\n\n    let rotate = context.rotate\n    context.rotate = (radians) => {\n        xform = xform.rotate((radians * 180) / Math.PI)\n        return rotate.call(context, radians)\n    }\n\n    let translate = context.translate\n    context.translate = (dx, dy) => {\n        xform = xform.translate(dx, dy)\n        return translate.call(context, dx, dy)\n    }\n\n    let transform = context.transform\n    context.transform = (a, b, c, d, e, f) => {\n        let matrix = svg.createSVGMatrix()\n        matrix.a = a\n        matrix.b = b\n        matrix.c = c\n        matrix.d = d\n        matrix.e = e\n        matrix.f = f\n        xform = xform.multiply(matrix)\n        return transform.call(context, a, b, c, d, e, f)\n    }\n\n    let setTransform = context.setTransform\n    context.setTransform = (a, b, c, d, e, f) => {\n        xform.a = a\n        xform.b = b\n        xform.c = c\n        xform.d = d\n        xform.e = e\n        xform.f = f\n        return setTransform.call(context, a, b, c, d, e, f)\n    }\n\n    let pt = svg.createSVGPoint()\n    context.transformedPoint = (x, y) => {\n        pt.x = x\n        pt.y = y\n        return pt.matrixTransform(xform.inverse())\n    }\n\n}\n\n/**\n * Adapted from [https://codepen.io/xiadd/pen/mdyEQVb]\n * @param {object} slider - The slider root element\n * @param {string} imageSource - URL of image\n */\nconst handleZoom = async (slider, imageSource) => {\n\n    if (!slider || !imageSource) return\n    let canvas = newElement('canvas', ['image-pan', 'image-zoom'])\n\n    let wrapper = slider.querySelector('.slider-wrapper')\n    wrapper.prepend(canvas)\n\n    if (!canvas) return\n    canvas.width = canvas.scrollWidth\n    canvas.height = canvas.scrollHeight\n\n    let image = new Image()\n    image.src = imageSource\n    await image.decode() // wait for image data\n\n    let context = canvas.getContext('2d')\n    trackTransforms(context)\n\n    const redraw = () => {\n        let p1 = context.transformedPoint(0, 0)\n        let p2 = context.transformedPoint(canvas.width, canvas.height)\n        context.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y)\n        context.save()\n        context.setTransform(1, 0, 0, 1, 0, 0)\n        context.clearRect(0, 0, canvas.width, canvas.height)\n        context.restore()\n\n        const factor = Math.min(canvas.width / image.width, canvas.height / image.height)\n        context.scale(factor, factor)\n        context.drawImage(image, canvas.width - (image.width * factor), canvas.height - (image.height * factor))\n        context.scale(1 / factor, 1 / factor)\n    }\n\n    redraw()\n\n    let lastX = canvas.width / 2\n    let lastY = canvas.height / 2\n    let dragStart, dragged\n\n    canvas.classList.add('visible')\n    document.body.classList.add('disable-touch')\n\n    canvas.addEventListener('mousedown', (event) => {\n        lastX = event.offsetX || event.pageX - canvas.offsetLeft\n        lastY = event.offsetY || event.pageY - canvas.offsetTop\n        canvas.style.cursor = canvas.style.cursor !== 'grabbing' && 'grabbing'\n        dragStart = context.transformedPoint(lastX, lastY)\n        dragged = false\n    }, { passive: false })\n\n    canvas.addEventListener('mousemove', (event) => {\n        lastX = event.offsetX || event.pageX - canvas.offsetLeft\n        lastY = event.offsetY || event.pageY - canvas.offsetTop\n        dragged = true\n        if (dragStart) {\n            let pt = context.transformedPoint(lastX, lastY)\n            context.translate(pt.x - dragStart.x, pt.y - dragStart.y)\n            redraw()\n        }\n    }, { passive: false })\n\n    canvas.addEventListener('mouseup', (event) => {\n        dragStart = null\n        canvas.style.cursor = canvas.style.cursor !== 'grab' && 'grab'\n        if (!dragged) zoom(event.shiftKey ? 1 : -1)\n    }, { passive: false })\n\n    canvas.addEventListener('touchstart', (event) => {\n        const mousePos = getTouchPos(canvas, event)\n        const mouseEvent = new MouseEvent('mousedown', {\n            clientX: mousePos.x,\n            clientY: mousePos.y\n        })\n        canvas.dispatchEvent(mouseEvent) // simulate mousedown\n    }, { passive: true })\n\n    canvas.addEventListener('touchmove', (event) => {\n        const touch = event.touches[0]\n        const mouseEvent = new MouseEvent('mousemove', {\n            clientX: touch.clientX,\n            clientY: touch.clientY\n        })\n        canvas.dispatchEvent(mouseEvent) // simulate mousemove\n    }, { passive: true })\n\n    canvas.addEventListener('touchend', () => {\n        const mouseEvent = new MouseEvent('mouseup', {});\n        canvas.dispatchEvent(mouseEvent) // simulate mouseup\n    }, { passive: false })\n\n    const getTouchPos = (canvasDom, touchEvent) => {\n        var rect = canvasDom.getBoundingClientRect();\n        return {\n            x: touchEvent.touches[0].clientX - rect.left,\n            y: touchEvent.touches[0].clientY - rect.top\n        };\n    }\n\n    let zoom = (delta) => {\n\n        let pt = context.transformedPoint(lastX, lastY)\n        context.translate(pt.x, pt.y)\n\n        let xform = context.getTransform()\n\n        let a = xform.a\n        let b = xform.b\n        let c = xform.c\n        let d = xform.d\n        let e = xform.e\n        let f = xform.f\n\n        if (a <= 0.1) {\n            a = 0.1\n            d = 0.1\n        } else if (a >= 3) {\n            a = 3\n            d = 3\n        }\n\n        context.setTransform(a, b, c, d, e, f)\n\n        let factor = Math.pow(0.5, delta)\n\n        if (a >= 0.1 || a <= 3) {\n            context.scale(factor, factor)\n        } else {\n            context.scale(0, 0)\n        }\n        context.translate(-pt.x, -pt.y)\n        redraw()\n\n    }\n\n    const handleScroll = (event) => {\n        event.preventDefault()\n        const delta = event.wheelDelta ? event.wheelDelta / 1500 : event.detail ? -event.detail : 0\n        if (delta) zoom(delta)\n    }\n\n    canvas.addEventListener('wheel', handleScroll, { passive: false })\n\n    const resizeObserver = new ResizeObserver(() => {\n        updateCanvas(canvas)\n        return\n    });\n    resizeObserver.observe(slider);\n\n    const updateCanvas = (canvas) => {\n        canvas.width = canvas.scrollWidth\n        canvas.height = canvas.scrollHeight\n        redraw()\n    }\n}\n\nexport default handleZoom\n", "'use strict'\n\n/**\n * Initialized observers for navigation buttons\n * @param {object} sliders - All sliders on the page\n */\nconst initObservers = (sliders) => {\n\n    if (!sliders) return\n\n    for (const slider of sliders) {\n\n        const disableObservers = slider.hasAttribute('data-disable-observers')\n        if (disableObservers) continue\n\n        const buttons = slider.querySelectorAll('.swiffy-slider .slider-nav')\n        if (!buttons) continue\n\n        const resizeObserver = new ResizeObserver(() => {\n            updateNavigationButtons()\n            return\n        });\n        resizeObserver.observe(slider);\n\n        const mutationObserver = new MutationObserver((mutations) => {\n            if (mutations[0].type === \"attributes\") {\n                updateNavigationButtons()\n                return\n            }\n        })\n        mutationObserver.observe(slider, { attributes: true })\n\n        const updateNavigationButtons = () => {\n            const slideCount = slider.querySelectorAll('.slide').length || 0\n            const slidesVisible = slider.querySelectorAll('.slide.slide-visible').length || 0\n\n            if (slidesVisible < slideCount) {\n                buttons.forEach((button) => button.classList.add('visible'))\n            } else {\n                buttons.forEach((button) => button.classList.remove('visible'))\n            }\n        }\n\n        updateNavigationButtons()\n    }\n}\n\nexport default initObservers\n", "export const swiffyslider = function() {\r\n    return {\r\n        version: \"1.6.0\",\r\n        init(rootElement = document.body) {\r\n            for (let sliderElement of rootElement.querySelectorAll(\".swiffy-slider\")) {\r\n                this.initSlider(sliderElement);\r\n            }\r\n        },\r\n\r\n        initSlider(sliderElement) {\r\n            for (let navElement of sliderElement.querySelectorAll(\".slider-nav\")) {\r\n                let next = navElement.classList.contains(\"slider-nav-next\");\r\n                navElement.addEventListener(\"click\", () => this.slide(sliderElement, next), { passive: true });\r\n            }\r\n            for (let indicatorElement of sliderElement.querySelectorAll(\".slider-indicators\")) {\r\n                indicatorElement.addEventListener(\"click\", () => this.slideToByIndicator());\r\n                this.onSlideEnd(sliderElement, () => this.handleIndicators(sliderElement), 60);\r\n            }\r\n            if (sliderElement.classList.contains(\"slider-nav-autoplay\")) {\r\n                const timeout = sliderElement.getAttribute(\"data-slider-nav-autoplay-interval\") ? sliderElement.getAttribute(\"data-slider-nav-autoplay-interval\") : 2500;\r\n                this.autoPlay(sliderElement, timeout, sliderElement.classList.contains(\"slider-nav-autopause\"));\r\n            }\r\n            if ([\"slider-nav-autohide\", \"slider-nav-animation\"].some(className => sliderElement.classList.contains(className))) {\r\n                const threshold = sliderElement.getAttribute(\"data-slider-nav-animation-threshold\") ? sliderElement.getAttribute(\"data-slider-nav-animation-threshold\") : 0.3;\r\n                this.setVisibleSlides(sliderElement, threshold);\r\n            }\r\n        },\r\n\r\n        setVisibleSlides(sliderElement, threshold = 0.3) {\r\n            let observer = new IntersectionObserver(slides => {\r\n                slides.forEach(slide => {\r\n                    slide.isIntersecting ? slide.target.classList.add(\"slide-visible\") : slide.target.classList.remove(\"slide-visible\");\r\n                });\r\n                sliderElement.querySelector(\".slider-container>*:first-child\").classList.contains(\"slide-visible\") ? sliderElement.classList.add(\"slider-item-first-visible\") : sliderElement.classList.remove(\"slider-item-first-visible\");\r\n                sliderElement.querySelector(\".slider-container>*:last-child\").classList.contains(\"slide-visible\") ? sliderElement.classList.add(\"slider-item-last-visible\") : sliderElement.classList.remove(\"slider-item-last-visible\");\r\n            }, {\r\n                root: sliderElement.querySelector(\".slider-container\"),\r\n                threshold: threshold\r\n            });\r\n            for (let slide of sliderElement.querySelectorAll(\".slider-container>*\"))\r\n                observer.observe(slide);\r\n        },\r\n\r\n        slide(sliderElement, next = true) {\r\n            const container = sliderElement.querySelector(\".slider-container\");\r\n            const fullpage = sliderElement.classList.contains(\"slider-nav-page\");\r\n            const noloop = sliderElement.classList.contains(\"slider-nav-noloop\");\r\n            const nodelay = sliderElement.classList.contains(\"slider-nav-nodelay\");\r\n            const slides = container.children;\r\n            const gapWidth = parseInt(window.getComputedStyle(container).columnGap);\r\n            const scrollStep = slides[0].offsetWidth + gapWidth;\r\n            let scrollLeftPosition = next ?\r\n                container.scrollLeft + scrollStep :\r\n                container.scrollLeft - scrollStep;\r\n            if (fullpage) {\r\n                scrollLeftPosition = next ?\r\n                    container.scrollLeft + container.offsetWidth :\r\n                    container.scrollLeft - container.offsetWidth;\r\n            }\r\n            if (container.scrollLeft < 1 && !next && !noloop) {\r\n                scrollLeftPosition = (container.scrollWidth - container.offsetWidth);\r\n            }\r\n            if (container.scrollLeft >= (container.scrollWidth - container.offsetWidth) && next && !noloop) {\r\n                scrollLeftPosition = 0;\r\n            }\r\n            container.scroll({\r\n                left: scrollLeftPosition,\r\n                behavior: nodelay ? \"auto\" : \"smooth\"\r\n            });\r\n        },\r\n\r\n        slideToByIndicator() {\r\n            const indicator = window.event.target;\r\n            const indicatorIndex = Array.from(indicator.parentElement.children).indexOf(indicator);\r\n            const indicatorCount = indicator.parentElement.children.length;\r\n            const sliderElement = indicator.closest(\".swiffy-slider\");\r\n            const slideCount = sliderElement.querySelector(\".slider-container\").children.length;\r\n            const relativeSlideIndex = (slideCount / indicatorCount) * indicatorIndex;\r\n            this.slideTo(sliderElement, relativeSlideIndex);\r\n        },\r\n\r\n        slideTo(sliderElement, slideIndex) {\r\n            const container = sliderElement.querySelector(\".slider-container\");\r\n            const gapWidth = parseInt(window.getComputedStyle(container).columnGap);\r\n            const scrollStep = container.children[0].offsetWidth + gapWidth;\r\n            const nodelay = sliderElement.classList.contains(\"slider-nav-nodelay\");\r\n            container.scroll({\r\n                left: (scrollStep * slideIndex),\r\n                behavior: nodelay ? \"auto\" : \"smooth\"\r\n            });\r\n        },\r\n\r\n        onSlideEnd(sliderElement, delegate, timeout = 125) {\r\n            let isScrolling;\r\n            sliderElement.querySelector(\".slider-container\").addEventListener(\"scroll\", function() {\r\n                window.clearTimeout(isScrolling);\r\n                isScrolling = setTimeout(delegate, timeout);\r\n            }, { capture: false, passive: true });\r\n        },\r\n\r\n        autoPlay(sliderElement, timeout, autopause) {\r\n            timeout = timeout < 750 ? 750 : timeout;\r\n            let autoplayTimer = setInterval(() => this.slide(sliderElement), timeout);\r\n            const autoplayer = () => this.autoPlay(sliderElement, timeout, autopause);\r\n            if (autopause) {\r\n                [\"mouseover\", \"touchstart\"].forEach(function(event) {\r\n                    sliderElement.addEventListener(event, function() {\r\n                        window.clearTimeout(autoplayTimer);\r\n                    }, { once: true, passive: true });\r\n                });\r\n                [\"mouseout\", \"touchend\"].forEach(function(event) {\r\n                    sliderElement.addEventListener(event, function() {\r\n                        autoplayer();\r\n                    }, { once: true, passive: true });\r\n                });\r\n            }\r\n            return autoplayTimer;\r\n        },\r\n\r\n        handleIndicators(sliderElement) {\r\n            if (!sliderElement) return;\r\n            const container = sliderElement.querySelector(\".slider-container\");\r\n            const slidingAreaWidth = container.scrollWidth - container.offsetWidth;\r\n            const percentSlide = (container.scrollLeft / slidingAreaWidth);\r\n            for (let scrollIndicatorContainers of sliderElement.querySelectorAll(\".slider-indicators\")) {\r\n                let scrollIndicators = scrollIndicatorContainers.children;\r\n                let activeIndicator = Math.abs(Math.round((scrollIndicators.length - 1) * percentSlide));\r\n                for (let element of scrollIndicators)\r\n                    element.classList.remove(\"active\");\r\n                scrollIndicators[activeIndicator].classList.add(\"active\");\r\n            }\r\n        }\r\n    };\r\n}();", "'use strict'\n\nimport handleZoom from './zoom'\nimport initObservers from './observers'\nimport { swiffyslider } from 'swiffy-slider'\n\nlet state = {\n    initKeydownListener: false,\n    initEscapeKeyListener: false,\n    currentSlider: null,\n    activeSlide: 0\n}\n\n/**\n * Creates a new DOM element with one or more classes\n * @param {string} element - Element tagname\n * @param {string|string array} classList - Element class(es)\n */\nconst newElement = (element, classList) => {\n    const newEl = document.createElement(element)\n    if (typeof classList === 'string') {\n        newEl.classList.add(classList)\n    } else {\n        newEl.classList.add(...classList)\n    }\n    return newEl\n}\n\n/**\n * Initializes keyboard navigation for sliders once\n * @param {object} sliderEl - The slider root element\n */\nconst initKeyboardNav = (sliderEl) => {\n\n    state.currentSlider = sliderEl\n    if (state.initKeydownListener) return\n\n    window.addEventListener('keydown', (event) => {\n\n        /* only handle keydown events if target is\n            document.body and no other element has focus */\n        if (event.srcElement !== document.body) return\n\n        const key = event.key\n        const altKey = event.altKey\n        const code = event.which\n\n        if (key === 'ArrowRight' || key === 'PageDown') { // go to next slide\n\n            event.preventDefault()\n            swiffyslider.slide(state.currentSlider, true)\n\n        } else if (key === 'ArrowLeft' || key === 'PageUp') { // go to previous slide\n\n            event.preventDefault()\n            swiffyslider.slide(state.currentSlider, false)\n\n        } else if (key === 'ArrowUp' || key === 'Home') { // go to first slide\n\n            event.preventDefault()\n            swiffyslider.slideTo(state.currentSlider, 0)\n\n        } else if (key === 'ArrowDown' || key === 'End') { // go to last slide\n\n            event.preventDefault()\n            const slideCount = state.currentSlider.querySelectorAll('.slide').length\n            if (slideCount) swiffyslider.slideTo(state.currentSlider, slideCount)\n\n        } else if (code >= 96 && code <= 105) { // go to slide 1-10 using numpad 0-9 keys\n\n            event.preventDefault()\n            swiffyslider.slideTo(state.currentSlider, event.which - 96)\n\n        } else if (code >= 48 && code <= 57) { // go to slide 1-10 using digit 0-9 keys\n\n            event.preventDefault()\n            swiffyslider.slideTo(state.currentSlider, event.which - 48)\n\n        } else if (code === 70 && altKey) { // go to fullscreen with Alt-F\n\n            event.preventDefault()\n            const buttonEnlarge = state.currentSlider.querySelector('.action.enlarge')\n            if (buttonEnlarge) buttonEnlarge.click()\n\n        } else if (code === 90 && altKey) { // go to zoom-in with Alt-Z\n\n            event.preventDefault()\n            const buttonZoom = state.currentSlider.querySelector('.action.zoom-in')\n            if (buttonZoom) buttonZoom.click()\n\n        }\n    })\n\n    state.initKeydownListener = true\n}\n\n/**\n * Initializes keyboard navigationto close fullscreen view\n * @param {object} fullscreenElement - The slider root element\n */\nconst initEscapeKey = (fullscreenElement) => {\n\n    if (state.initEscapeKeyListener) return\n\n    window.addEventListener('keydown', (event) => {\n        if (event.srcElement === document.body) {\n            if (event.key === 'Escape') {\n                if (document.body.classList.contains('fullscreen')) {\n                    const buttonClose = fullscreenElement.querySelector('.action.close')\n                    if (buttonClose) buttonClose.click()\n                }\n            }\n        }\n    })\n\n    state.initEscapeKeyListener = true\n}\n\n/**\n * Handles exit from fullscreen view when OS fullscreen view is closed\n * @param {object} fullscreenElement - Source element for fullscreen view\n */\nconst initFullscreenChange = (fullscreenElement) => {\n    document.body.onfullscreenchange = () => { // bug: addEventListener method kills tab in Chrome\n        if (window.screen.availHeight !== window.innerHeight || window.screen.availWidth !== window.innerWidth) {\n            const buttonClose = fullscreenElement.querySelector('.action.close')\n            if (buttonClose) buttonClose.click()\n        }\n    }\n}\n\n/**\n * Initializes slider indicators\n * @param {object} slider - The swiffy slider element\n */\nconst initIndicators = (slider) => {\n\n    const sliderIndicators = slider.querySelector('.slider-indicators')\n    if (!sliderIndicators) return\n\n    const slideCount = slider.querySelectorAll('.slide').length\n    if (!slideCount) return\n\n    for (let i = 0; i < slideCount; i++) {\n        const button = newElement('button', 'indicator')\n        if (i === 0) button.classList.add('active')\n        sliderIndicators.appendChild(button)\n    }\n\n    sliderIndicators.classList.add('visible')\n}\n\n/**\n * Initializes fullscreen view on click by cloning source slider\n * @param {object} slider - The slider root element\n * @param {object} sliderEl - The swiffy slider element\n */\nconst initFullScreen = async (slider, sliderEl, containerClass) => {\n\n    const buttonEnlarge = slider.querySelector('.action.enlarge')\n    if (!buttonEnlarge) return // exit\n\n    await buttonEnlarge.addEventListener('click', async () => {\n\n        // create DOM elements\n        const fullscreenSliderDiv = newElement('div', ['container', containerClass, 'fullscreen'])\n        const rowEl = newElement('div', 'row')\n        const columnEl = newElement('div', ['column', 'slider'])\n        const buttonClose = newElement('button', ['action', 'close'])\n        const tooltip = newElement('span', ['tooltip', 'tooltip--bottom', 'tooltip--fade-in'])\n        tooltip.innerText = 'Close'\n\n        // clone thumbnails\n        const thumbnails = slider.querySelector('.slider-thumbnails')\n        if (thumbnails) {\n            columnEl.appendChild(thumbnails.cloneNode(true))\n        }\n\n        // clone wrapper with slider and navigation\n        const wrapper = slider.querySelector('.slider-wrapper')\n        if (wrapper) {\n            columnEl.appendChild(wrapper.cloneNode(true))\n        }\n\n        // add elements to DOM\n        rowEl.appendChild(columnEl)\n        fullscreenSliderDiv.appendChild(rowEl)\n        buttonClose.appendChild(tooltip)\n        fullscreenSliderDiv.appendChild(buttonClose)\n        document.body.appendChild(fullscreenSliderDiv)\n\n        // init cloned slider functionality\n        const fullscreenSliderEl = fullscreenSliderDiv.querySelector('.swiffy-slider')\n        fullscreenSliderEl.classList.remove('slider-nav-mousedrag'); // bug: mousedrag does not work on a clone\n        const enableKeyboardNav = fullscreenSliderEl.hasAttribute('data-enable-keyboard-nav')\n        const fullscreenElement = document.querySelector('.container.' + containerClass + '.fullscreen')\n        const enableZoom = fullscreenSliderEl.hasAttribute('data-enable-zoom')\n\n        if (thumbnails) {\n            initThumbnails(fullscreenSliderDiv, fullscreenSliderEl)\n        }\n\n        swiffyslider.initSlider(fullscreenSliderEl)\n        swiffyslider.slideTo(fullscreenSliderEl, state.activeSlide ? state.activeSlide : 0)\n\n        document.body.classList.add('fullscreen')\n\n        // enable OS fullscreen view if available\n        if (document.fullscreenEnabled) {\n            if (!document.fullscreenElement) {\n                await fullscreenElement.requestFullscreen()\n            } else {\n                document.exitFullscreen()\n            }\n        }\n\n        if (enableKeyboardNav) {\n            initKeyboardNav(fullscreenSliderEl)\n        }\n\n        // set active slide and focus on original slider\n        buttonClose.addEventListener('click', () => {\n            if (document.fullscreenEnabled && document.fullscreenElement) {\n                document.exitFullscreen()\n            }\n            swiffyslider.slideTo(sliderEl, state.activeSlide ? state.activeSlide : 0)\n            fullscreenSliderDiv.remove()\n            if (enableKeyboardNav) {\n                initKeyboardNav(sliderEl)\n            }\n            document.body.classList.remove('fullscreen', 'disable-touch')\n        })\n\n        initEscapeKey(fullscreenElement)\n        initFullscreenChange(fullscreenElement)\n\n        if (enableZoom) {\n            initZoom(fullscreenElement, fullscreenSliderEl)\n        }\n    })\n\n    buttonEnlarge.classList.add('visible')\n}\n\n/**\n * Initializes thumbnails and slider navigation sync\n * @param {object} slider - The slider root element\n * @param {object} sliderEl - the swiffy slider element\n */\nconst initThumbnails = (slider, sliderEl) => {\n\n    const thumbnailLoadCount = sliderEl.hasAttribute('data-thumbnail-load')\n    const thumbnailsContainer = slider.querySelector('.slider-thumbnails ul')\n    if (!thumbnailsContainer) return\n    const thumbnails = thumbnailsContainer.querySelectorAll('li')\n\n    let thumbnailsToShow = 2\n    if (thumbnailLoadCount) {\n        const thumbnailCount = parseInt(sliderEl.getAttribute('data-thumbnail-load'))\n        if (thumbnailCount >= thumbnailsToShow) thumbnailsToShow = thumbnailCount;\n    }\n\n    swiffyslider.onSlideEnd(slider, () => {\n\n        const slides = slider.querySelectorAll('.slider-container li')\n\n        // loop through slides and match state with thumbnails\n        for (const [i, slide] of Array.from(slides).entries()) {\n\n            thumbnails[i].classList.remove('active')\n\n            if (slide.classList.contains('slide-visible')) {\n                thumbnails[i].classList.add('active')\n                state.activeSlide = i\n\n                // reveal remaining thumbnails\n                if (thumbnailsToShow !== 0 && i >= thumbnailsToShow - 1) {\n                    thumbnails[i].removeAttribute('data-count')\n                    thumbnails.forEach(thumbnail => {\n                        thumbnail.classList.add('visible')\n                    })\n                }\n\n                thumbnails[i].parentNode.scrollTop = thumbnails[i].offsetTop\n\n                if (thumbnailsToShow !== 0 && i >= thumbnailsToShow - 1) {\n                    thumbnails[i].parentNode.classList.add('scroll')\n                }\n\n            }\n        }\n    }, 25)\n\n    // loop through thumbnails and match state with slides\n    for (const [i, el] of Array.from(thumbnails).entries()) {\n\n        // make first thumbnail active\n        if (i === 0) el.classList.add('active')\n\n        // if no initial set, display all thumbnails\n        if (!thumbnailsToShow) {\n            el.classList.add('visible')\n            el.removeAttribute('data-count')\n        }\n\n        // display initial set of thumbnails\n        if (i < thumbnailsToShow) {\n            el.classList.add('visible')\n        }\n\n        // set remaining count on last thumbnail to show initially\n        if (i + 1 === thumbnailsToShow && thumbnails.length !== thumbnailsToShow) {\n            el.setAttribute('data-count', '+' + (thumbnails.length - thumbnailsToShow))\n        }\n\n        // navigate to slide\n        el.addEventListener('click', () => {\n\n            // reveal remaining thumbnails\n            if (i + 1 === thumbnailsToShow) {\n                for (const el of thumbnails) {\n                    el.classList.add('visible')\n                    el.removeAttribute('data-count')\n                }\n            }\n\n            swiffyslider.slideTo(slider, i)\n            state.activeSlide = i\n        })\n\n    }\n\n    // make thumbnail list scrollable\n    if (!thumbnailsToShow) {\n        thumbnailsContainer.classList.add('scroll')\n    }\n}\n\n/**\n * Initializes zoom function\n * @param {object} slider - The slider root element\n * @param {object} sliderEl - the swiffy slider element\n */\nconst initZoom = (slider, sliderEl) => {\n\n    const buttonZoom = slider.querySelector('.action.zoom-in')\n    if (!buttonZoom) return\n\n    buttonZoom.addEventListener('click', () => {\n\n        const zoomActive = buttonZoom.classList.contains('zoom-out')\n\n        if (zoomActive) {\n            buttonZoom.classList.remove('zoom-out')\n            const canvas = slider.querySelector('.image-pan.image-zoom')\n            canvas.remove() // remove canvas element from DOM after usage\n        } else {\n            const currentSlide = sliderEl.querySelector('.slide-visible img')\n            handleZoom(slider, currentSlide.src);\n            buttonZoom.classList.add('zoom-out')\n        }\n\n    })\n\n    buttonZoom.classList.add('visible')\n}\n\n/**\n * Initializes all sliders on page\n */\nconst initSliders = () => {\n\n    const sliders = document.querySelectorAll('.slider')\n    if (!sliders) return\n\n    for (const slider of sliders) {\n\n        const sliderEl = slider.querySelector('.swiffy-slider')\n        if (!sliderEl) continue // we only initialize swiffy-slider elements\n\n        const enableIndicators = sliderEl.hasAttribute('data-enable-indicators')\n        const hasThumbnails = slider.querySelector('.slider-thumbnails')\n        const enableZoom = sliderEl.hasAttribute('data-enable-zoom')\n        const enableFullScreen = sliderEl.hasAttribute('data-enable-fullscreen')\n        const enableKeyboardNav = sliderEl.hasAttribute('data-enable-keyboard-nav')\n        const containerClass = sliderEl.getAttribute('data-container-class')\n\n        if (enableIndicators) {\n            initIndicators(sliderEl)\n        }\n\n        if (hasThumbnails) {\n            initThumbnails(slider, sliderEl)\n        }\n\n        if (enableZoom) {\n            initZoom(slider, sliderEl)\n        }\n\n        if (enableFullScreen) {\n            initFullScreen(slider, sliderEl, containerClass)\n        }\n\n        if (enableKeyboardNav) {\n            initKeyboardNav(sliderEl)\n        }\n\n        swiffyslider.initSlider(sliderEl)\n    }\n\n    const timeout = setTimeout(() => {\n        initObservers(sliders)\n        clearTimeout(timeout)\n    }, 500)\n}\n\nwindow.swiffyslider = swiffyslider\ninitSliders()\n\nexport default newElement\n"],
  "mappings": "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",
  "names": ["canvas", "el"]
}
